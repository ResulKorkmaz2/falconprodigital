'use client'

import { useState, useEffect } from 'react'
import { useRouter, usePathname } from 'next/navigation'
import { NAVIGATION_MENU, COMPANY_INFO } from '@/lib/constants'
import { scrollToElement, cn } from '@/lib/utils'
import Container from '@/components/ui/Container'
import Button from '@/components/ui/Button'

const Navigation = () => {
  const router = useRouter()
  const pathname = usePathname()
  const [isOpen, setIsOpen] = useState(false)
  const [isScrolled, setIsScrolled] = useState(false)
  const [activeSection, setActiveSection] = useState('home')
  const [mounted, setMounted] = useState(false)
  
  // Check if we're NOT on the home page (only after mounting)
  const isNotHomePage = mounted && pathname !== '/' && pathname !== null

  // Handle mounting
  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (!mounted) return // Only run on client side
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10)
      
      // Only update active section if we're on the home page
      if (!isNotHomePage) {
        const sections = NAVIGATION_MENU.map(item => item.id)
        const current = sections.find(section => {
          const element = document.getElementById(section)
          if (element) {
            const rect = element.getBoundingClientRect()
            return rect.top <= 100 && rect.bottom >= 100
          }
          return false
        })
        
        if (current) {
          setActiveSection(current)
        }
      }
    }

    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as HTMLElement
      if (!target.closest('.mobile-menu') && !target.closest('.mobile-menu-button')) {
        setIsOpen(false)
      }
    }

    window.addEventListener('scroll', handleScroll)
    document.addEventListener('click', handleClickOutside)
    
    return () => {
      window.removeEventListener('scroll', handleScroll)
      document.removeEventListener('click', handleClickOutside)
    }
  }, [isNotHomePage, mounted])

  // Set active section based on current page
  useEffect(() => {
    if (!mounted) return // Only run on client side
    
    if (pathname?.startsWith('/services/')) {
      // On service pages, set services as active
      setActiveSection('services')
    } else if (pathname === '/pricing') {
      // On pricing page, set pricing as active
      setActiveSection('pricing')
    } else if (pathname === '/') {
      // On home page, set home as active by default
      setActiveSection('home')
    } else {
      // On other pages (privacy-policy, cookie-policy, etc.), set home as default
      setActiveSection('home')
    }
  }, [pathname, mounted])

  const handleNavClick = (href: string, id: string) => {
    setActiveSection(id)
    setIsOpen(false)
    
    if (href.startsWith('#')) {
      const elementId = href.substring(1)
      
      // If we're NOT on the home page, navigate to home first
      if (isNotHomePage) {
        // Navigate to home with hash
        router.push(`/${href}`)
      } else {
        // We're already on home, just scroll to element
        scrollToElement(elementId)
      }
    } else {
      // For direct page navigation (like /pricing)
      router.push(href)
    }
  }

  const toggleMenu = () => {
    console.log('Hamburger clicked, current isOpen:', isOpen)
    setIsOpen(!isOpen)
  }

  return (
    <nav className={cn(
      'fixed top-0 left-0 right-0 z-50 transition-all duration-500',
      isScrolled 
        ? 'bg-white/98 backdrop-blur-xl shadow-xl border-b border-gray-100' 
        : 'bg-transparent'
    )}>
      <Container>
        <div className="flex items-center justify-between h-18 lg:h-22 py-2">
          {/* Enhanced Logo */}
          <div 
            className="flex items-center cursor-pointer group transition-all duration-300 hover:scale-105"
            onClick={() => {
              if (isNotHomePage) {
                router.push('/')
              } else {
                handleNavClick('#home', 'home')
              }
            }}
          >
            <div className="flex items-center">
              {/* Company Logo */}
              <div className={cn(
                "w-12 h-12 lg:w-14 lg:h-14 rounded-xl flex items-center justify-center ml-3 transition-all duration-300 shadow-lg hover:scale-110 overflow-hidden",
                isScrolled 
                  ? "bg-white shadow-gray-200" 
                  : "bg-white shadow-white/30"
              )}>
                <img 
                  src="/logo.png" 
                  alt="Falcon Pro Digital Logo" 
                  className="w-8 h-8 lg:w-10 lg:h-10 object-contain"
                />
              </div>
              <div className="transition-all duration-300">
                <h1 className={cn(
                  "text-xl lg:text-2xl font-bold transition-all duration-300",
                  isScrolled ? "text-gray-900" : "text-white"
                )}>
                  {COMPANY_INFO.name}
                </h1>
                <p className={cn(
                  "text-xs lg:text-sm leading-none transition-all duration-300 font-medium",
                  isScrolled ? "text-primary-600" : "text-white/80"
                )}>
                  فرع من Aptiro LLC
                </p>
              </div>
            </div>
          </div>

          {/* Enhanced Desktop Navigation */}
          <div className="hidden lg:flex items-center space-x-6 space-x-reverse">
            {NAVIGATION_MENU.map((item, index) => (
              <button
                key={item.id}
                onClick={() => handleNavClick(item.href, item.id)}
                className={cn(
                  'relative px-4 py-2.5 text-base font-semibold transition-all duration-300 rounded-xl group',
                  activeSection === item.id
                    ? isScrolled 
                      ? 'text-primary-600 bg-primary-50 shadow-md' 
                      : 'text-white bg-white/20 backdrop-blur-sm shadow-lg'
                    : isScrolled
                      ? 'text-gray-700 hover:text-primary-600 hover:bg-gray-50'
                      : 'text-white/90 hover:text-white hover:bg-white/10 backdrop-blur-sm'
                )}
                style={{ animationDelay: `${index * 100}ms` }}
              >
                {item.name}
                {/* Active indicator */}
                {activeSection === item.id && (
                  <div className={cn(
                    "absolute bottom-0 left-1/2 transform -translate-x-1/2 h-0.5 w-6 rounded-full transition-all duration-300",
                    isScrolled ? "bg-primary-600" : "bg-white"
                  )} />
                )}
              </button>
            ))}
          </div>

          {/* Enhanced Desktop CTA */}
          <div className="hidden lg:block">
            <Button
              variant={isScrolled ? "primary" : "secondary"}
              size="md"
              onClick={() => handleNavClick('#contact', 'contact')}
              className={cn(
                "transition-all duration-300 shadow-lg hover:shadow-xl",
                !isScrolled && "bg-white text-primary-600 hover:bg-gray-50 border-white"
              )}
            >
              <svg className="w-4 h-4 ml-2" fill="currentColor" viewBox="0 0 20 20">
                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
              </svg>
              تواصل معنا
            </Button>
          </div>

          {/* Modern Mobile Menu Button */}
          <button
            onClick={toggleMenu}
            className={cn(
              "lg:hidden relative w-12 h-12 rounded-2xl transition-all duration-300 flex items-center justify-center group overflow-hidden",
              isScrolled 
                ? "bg-white shadow-xl hover:shadow-2xl border border-gray-100 hover:border-primary-200" 
                : "bg-white/15 backdrop-blur-xl hover:bg-white/25 shadow-2xl border border-white/20"
            )}
            aria-label="Toggle menu"
          >
            {/* Animated Background */}
            <div className={cn(
              "absolute inset-0 bg-gradient-to-r transition-all duration-300",
              isScrolled
                ? "from-primary-50 to-accent-50 opacity-0 group-hover:opacity-100"
                : "from-white/10 to-white/5 opacity-0 group-hover:opacity-100"
            )} />
            
            {/* Hamburger Lines */}
            <div className="relative w-6 h-6 flex flex-col justify-center items-center">
              <span className={cn(
                "block w-6 h-0.5 rounded-full transition-all duration-300 transform origin-center",
                isOpen ? "rotate-45 translate-y-1.5" : "translate-y-0",
                isScrolled ? "bg-gray-700 group-hover:bg-primary-600" : "bg-white"
              )} />
              <span className={cn(
                "block w-6 h-0.5 rounded-full transition-all duration-300 my-1.5",
                isOpen ? "opacity-0 scale-0" : "opacity-100 scale-100",
                isScrolled ? "bg-gray-700 group-hover:bg-primary-600" : "bg-white"
              )} />
              <span className={cn(
                "block w-6 h-0.5 rounded-full transition-all duration-300 transform origin-center",
                isOpen ? "-rotate-45 -translate-y-1.5" : "translate-y-0",
                isScrolled ? "bg-gray-700 group-hover:bg-primary-600" : "bg-white"
              )} />
            </div>
            
            {/* Pulse Effect */}
            <div className={cn(
              "absolute inset-0 rounded-2xl transition-all duration-300",
              isOpen 
                ? "ring-4 ring-primary-200 ring-opacity-75" 
                : "ring-0"
            )} />
          </button>
        </div>

        {/* Modern Mobile Menu */}
        {isOpen && (
          <div className="lg:hidden mobile-menu animate-slide-down">
            <div className="px-6 pt-6 pb-8 mt-6 mx-4 bg-white/95 backdrop-blur-2xl rounded-3xl shadow-2xl border border-gray-100/50 relative overflow-hidden">
            {/* Background Gradient */}
            <div className="absolute inset-0 bg-gradient-to-br from-primary-50/50 via-white to-accent-50/30" />
            
            {/* Mobile Navigation Items */}
            <div className="relative z-10 space-y-2">
              {NAVIGATION_MENU.map((item, index) => (
                <button
                  key={item.id}
                  onClick={() => handleNavClick(item.href, item.id)}
                  className={cn(
                    'w-full text-right px-5 py-4 text-lg font-bold transition-all duration-300 rounded-2xl relative group overflow-hidden border',
                    activeSection === item.id
                      ? 'text-white bg-gradient-to-r from-primary-600 to-primary-700 shadow-xl shadow-primary-600/30 border-primary-500'
                      : 'text-gray-700 hover:text-primary-600 bg-white hover:bg-gradient-to-r hover:from-primary-50 hover:to-accent-50 hover:shadow-lg border-gray-100 hover:border-primary-200'
                  )}
                  style={{ 
                    animationDelay: `${index * 100}ms`,
                    transform: isOpen ? 'translateX(0) scale(1)' : 'translateX(20px) scale(0.95)',
                    transition: `all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) ${index * 50}ms`
                  }}
                >
                  <div className="flex items-center justify-between relative z-10">
                    <div className="flex items-center">
                      <span className="text-lg">{item.name}</span>
                      {activeSection === item.id && (
                        <div className="w-2 h-2 bg-white rounded-full mr-3 animate-pulse" />
                      )}
                    </div>
                    
                    {/* Arrow Icon */}
                    <svg 
                      className={cn(
                        "w-5 h-5 transition-all duration-300",
                        activeSection === item.id ? "text-white rotate-0" : "text-primary-400 group-hover:text-primary-600 group-hover:translate-x-1"
                      )} 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                  </div>
                  
                  {/* Shimmer Effect */}
                  <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700" />
                </button>
              ))}
            </div>
            
            {/* Enhanced Mobile CTA Section */}
            <div className="relative z-10 pt-6 mt-6 border-t border-gradient-to-r from-primary-200 via-gray-200 to-accent-200">
              <div className="space-y-4">
                {/* Primary CTA */}
                <Button
                  variant="primary"
                  size="lg"
                  className="w-full bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300"
                  onClick={() => handleNavClick('#contact', 'contact')}
                >
                  <svg className="w-5 h-5 ml-2" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
                  </svg>
                  <span className="font-bold">تواصل عبر الواتساب</span>
                </Button>
                
                {/* Secondary CTA */}
                <button
                  onClick={() => handleNavClick('/pricing', 'pricing')}
                  className="w-full px-5 py-3 text-center bg-gradient-to-r from-accent-50 to-primary-50 hover:from-accent-100 hover:to-primary-100 text-primary-700 hover:text-primary-800 font-bold rounded-2xl border-2 border-primary-200 hover:border-primary-300 transition-all duration-300 hover:shadow-lg"
                >
                  <div className="flex items-center justify-center">
                    <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                    </svg>
                    <span>عرض الأسعار</span>
                  </div>
                </button>
              </div>
              
              {/* Company info in mobile */}
              <div className="text-center pt-4 mt-4 border-t border-gray-100">
                <div className="flex items-center justify-center mb-2">
                  <div className="w-8 h-8 bg-gradient-to-r from-primary-600 to-accent-600 rounded-xl flex items-center justify-center mr-2">
                    <img 
                      src="/logo.png" 
                      alt="Falcon Pro Digital" 
                      className="w-5 h-5 object-contain"
                    />
                  </div>
                  <p className="text-sm font-bold text-gray-700">
                    {COMPANY_INFO.name}
                  </p>
                </div>
                <p className="text-xs text-gray-500 leading-relaxed">
                  أكبر شركة رقمية في الخليج العربي
                </p>
                <p className="text-xs text-primary-600 font-medium mt-1">
                  فرع من Aptiro LLC
                </p>
              </div>
            </div>
          </div>
        )}
      </Container>
    </nav>
  )
}

export default Navigation
